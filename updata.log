
2017/4/25
Done:
1. 优化代码结构，填掉前期的一些坑，比如用回调函数处理标题栏
2. 为登陆系统增加提示
3. 增加注册页面（服务端API并没有完成）
4. 只有登陆后才能提交代码已经查看排名
5. 使用cookies
6. 去掉一些无用注释
7. 完成前端和后端对用户密码的二次SHA1加密，提高安全性

2017/4/26
Done:
1. 实现子进程调用模块（同步/异步）
2. 移除服务端SHA1加密模块，使用nodejs原生crypto.createHash方法生成，提高登陆效率

2017/4/27
Done:
1. 主页密码框绑定回车事件
2. 修复某些界面显示BUG
3. 完善注册页面判断规则和交互
4. 服务端完成注册API，注册账号模块正式上线

2017/4/28
Done:
1. 配置好服务端的邮件服务
2. 完成邮箱验证系统(发送验证邮件，激活账号等功能)
3. 优化html代码结构
4. 完成用户认证系统[3小时无操作认证过期，防止通过修改cookie改变登陆状态]
5. 所有涉及到用户的API调用需要先通过认证
6. 完善了用户系统
7. 修补了网页上多个逻辑安全权限的漏洞(需要通过邮箱认证才能访问用户功能)
8. 加入了时间模块
9. 添加了网页对get参数的处理
10. 增加邮件激活页面(未激活会自动跳转)

2017/4/29
Done:
1. 完成用户中心页面(服务端功能未实现)
2. 重新设计部分前端页面


2017/5/1
Done:
1. 重写后台日志格式
2. 服务端进行邮箱和用户名格式检测，防止非法POST
3. 修改前端一些样式
4. 修复前端某些BUG


2017/5/7
Done:
1. 重构服务端代码，使用express的中间件，减少了if的嵌套

2017/5/11
Done:
1. 修改session和sign为httponly(提高安全性,防止js访问cookie)
2. 修改部分网页判断是否登陆逻辑
3. 服务端引入cookie模块，直接从header读取cookie
4. 网页发送服务端的信息去掉验证信息，直接从header传递
5. 网页适应移动端chrome浏览器的浸沉式界面

2017/5/11
Done:
1. 实现后端模块化，把用户认证模块分离出来
2. 重构前端和服务端部分代码
3. 重写服务端日志

2017/5/12
Done:
1. 完成用户中心的服务端API
2. 发送验证邮件每小时只能一次
3. 实现修改密码功能
4. 修复前端某些逻辑错误BUG
5. 重新设计激活邮件样式
6. 重新设计成绩回应界面
7. 修复邮件无法发送的用户认证逻辑错误
8. 增加详细更新页面
9. 整合网页端js

2017/5/12
Done:
0. 完成.ntl文件动态渲染引擎
1. 动态渲染问题详情页面
2. 修复不能退出登陆的BUG
3. 从数据库读取问题列表来动态渲染问题页面
4. 修复用户认证系统读取参数部分问题
5. 增加评测系统服务端返回数据
6. 注册时候为用户生成一张数据表
7. 修复标题栏某些相对连接不正常的BUG

2017/5/13
Done：
1. 问题详情页面细节设计更新
2. 问题详情页面返回数据增加帮助文本
3. 修复某些导致服务端崩溃的BUG
4. 修复代码伴随页面加载时编辑框行号显示错位的BUG
5. 现在不登录也可以查看问题详情

2017/5/14
Done:
1. 上线评测模块
2. 修复若干BUG

2017/5/15
Done:
1. 修复无限刷新获取成绩的BUG
2. 修复代码里面的\n和单引号引发程序崩溃的BUG

V0.2
1. 采用ejs引擎渲染问题详情页面
2. 把数据库模块单独分离出来
3. 修复若干BUG
4. 整合各个用户的数据库表
5. 重构数据库
6. 重新设计前端页面
7. 重构服务端代码，统一命名规则，提高易读性，模块化
8. 显示提交次数
9. 评测端如果崩溃了导致数据处于judging状态会在一个小时后自动置0
10. 完成排名系统

2017/5/23
1. 修复邮件发送失败的BUG
2. 修复邮件发送的错误内容
3. 重构前端js代码
4. 完成邮箱找回密码功能
5. 修复主页回车事件绑定失败的BUG
6. 微调部分前端页面样式


2017/5/25
1. 修复某些导致不能提交的BUG
2. 修复反斜杠导致数据库写入失败的BUG
3. 用vuejs重写问题列表页面

2017/5/26
1. 修复提交次数显示不正常的BUG
2. 修复若干导致服务器崩溃的BUG
3. 用vuejs重写问题详情页面
4. 修复代码某些字符显示错误的BUG
5. 微调部分前端页面样式

2017/7/11
1. 修复部分BUG
2. 使用mysql2预备性语句重构

2017/7/17
1. 使用localStorage储存导航栏
2. 规范化前端html代码，把js放在网页最后，优化加载体验

todo:
2. 设计管理员页面(控制面板)并完成后端
6. 使用Violet用户系统【添加验证码系统、重构用户认证系统，把sign作为token储存】
8. 把导航栏放在localStorage里面，优化加载速度
10. 采用ajax异步加载内容